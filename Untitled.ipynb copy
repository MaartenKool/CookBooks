{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"></ul></div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create data set for regression\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import datasets\n",
    "\n",
    "\n",
    "def regression():\n",
    "    data_regression = datasets.load_diabetes()\n",
    "    df = pd.DataFrame(data_regression['data'],\n",
    "                      columns=data_regression['feature_names'])\n",
    "    df['ycol'] = data_regression['target']\n",
    "    X = df.drop('ycol', axis=1)\n",
    "    y = df['ycol'].values\n",
    "    X_train, X_test, y_train, y_test = train_test_split(\n",
    "        X, y, test_size=0.3, random_state=0)\n",
    "    ss = StandardScaler()\n",
    "    X_train = (ss.fit_transform(X_train))\n",
    "    X_test = ss.transform(X_test)\n",
    "    X = ss.transform(X)\n",
    "    print(f'Shape df {df.shape}')\n",
    "    print(f'Shape X {X.shape}')\n",
    "    print(f'Shape y {y.shape}')\n",
    "    print(f'Shape X_train {X_train.shape}')\n",
    "    print(f'Shape y_train {y_train.shape}')\n",
    "    print(f'Shape X_test {X_test.shape}')\n",
    "    print(f'Shape y_test {y_test.shape}')\n",
    "    print(f'Mean X {X_train.mean()}, should be close to 0')\n",
    "    print(f'Std X {X_train.std()}, should be close to 1')\n",
    "    print(f'Available columns {df.columns.values}')\n",
    "    return df, X, y, X_train, y_train, X_test, y_test\n",
    "#     result = {'X': X, 'y': y, 'X_train': X_train, 'X_test': X_test, 'y_train': y_train, 'y_test': y_test}\n",
    "#     return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape df (442, 11)\n",
      "Shape X (442, 10)\n",
      "Shape y (442,)\n",
      "Shape X_train (309, 10)\n",
      "Shape y_train (309,)\n",
      "Shape X_test (133, 10)\n",
      "Shape y_test (133,)\n",
      "Mean X 1.1497455271199033e-17, should be close to 0\n",
      "Std X 1.0, should be close to 1\n",
      "Available columns ['age' 'sex' 'bmi' 'bp' 's1' 's2' 's3' 's4' 's5' 's6' 'ycol']\n"
     ]
    }
   ],
   "source": [
    "df, X, y, X_train, y_train, X_test, y_test = regression()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "age    -3.634285e-16\n",
       "sex     1.308343e-16\n",
       "bmi    -8.045349e-16\n",
       "bp      1.281655e-16\n",
       "s1     -8.835316e-17\n",
       "s2      1.327024e-16\n",
       "s3     -4.574646e-16\n",
       "s4      3.777301e-16\n",
       "s5     -3.830854e-16\n",
       "s6     -3.412882e-16\n",
       "ycol    1.521335e+02\n",
       "dtype: float64"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.27603023,  1.04299465,  0.03228785, ...,  1.14040229,\n",
       "         0.50715185,  0.64350529],\n",
       "       [-0.55133023, -0.95877769, -1.35153919, ..., -0.8136836 ,\n",
       "        -0.71234348, -0.16809934],\n",
       "       [ 0.12560106, -0.95877769,  1.25987636, ...,  1.03477602,\n",
       "        -0.06873772, -0.57390166],\n",
       "       ...,\n",
       "       [ 1.25381988, -0.95877769, -0.41410797, ...,  1.44973635,\n",
       "         1.62885802,  2.67251686],\n",
       "       [-1.60433446, -0.95877769, -1.48545793, ..., -0.8136836 ,\n",
       "        -0.35183841, -1.62898767],\n",
       "       [ 0.87774694,  1.04299465,  1.50539406, ...,  0.69526303,\n",
       "         1.51252894,  1.69859131]])"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def g(x):\n",
    "  y0 = x + 1\n",
    "  y1 = x * 3\n",
    "  y2 = y0 ** y1\n",
    "  result = {'y0':y0, 'y1':y1 ,'y2':y2}\n",
    "  return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'y0': 6, 'y1': 15, 'y2': 470184984576}"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'result' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-20-0ac921c19f1a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'result' is not defined"
     ]
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  },
  "toc": {
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "165px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
