{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#KMeans-Demo\" data-toc-modified-id=\"KMeans-Demo-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>KMeans Demo</a></span></li></ul></div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import a load of packages\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "%matplotlib inline\n",
    "data = 'Desktop/shapes.xlsx'\n",
    "df = pd.read_excel(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# KMeans Demo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.360700</td>\n",
       "      <td>0.748029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-3.278940</td>\n",
       "      <td>9.899953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.588943</td>\n",
       "      <td>4.001485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.973739</td>\n",
       "      <td>6.944545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.431693</td>\n",
       "      <td>-0.201737</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          x         y\n",
       "0  1.360700  0.748029\n",
       "1 -3.278940  9.899953\n",
       "2  0.588943  4.001485\n",
       "3 -0.973739  6.944545\n",
       "4  2.431693 -0.201737"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "from sklearn.cluster import KMeans, k_means\n",
    "from sklearn.metrics import silhouette_score\n",
    "from sklearn.datasets.samples_generator import make_blobs\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "matplotlib.style.use('ggplot')\n",
    "\n",
    "X, y = make_blobs(\n",
    "    n_samples    =  200, \n",
    "    centers      =  5, \n",
    "    n_features   =  2,\n",
    "    random_state =  0\n",
    ")\n",
    "\n",
    "\n",
    "df = pd.DataFrame(X, columns=['x', 'y'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1c140048>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 369,
       "width": 424
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot(kind=\"scatter\", x=\"x\", y=\"y\", figsize=(6, 6));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = KMeans(n_clusters=4, random_state=0).fit(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted clusters to points:  [0 2 3 2 0 3 3 3 3 0 0 0 1 3 3 0 3 2 2 0 2 3 0 2 1 0 2 2 1 2 0 3 3 3 3 0 1\n",
      " 2 0 3 3 3 3 0 1 1 1 0 0 2 3 0 2 0 1 1 3 2 1 0 1 1 3 3 3 1 3 0 0 1 1 0 1 3\n",
      " 2 1 3 3 3 0 2 3 0 0 2 2 3 3 1 1 2 1 2 2 3 3 0 3 1 3 3 3 1 0 0 1 1 2 3 3 0\n",
      " 3 1 2 3 0 3 3 3 3 1 3 1 3 3 3 3 2 0 3 3 3 2 0 2 1 3 3 1 1 0 1 3 3 2 0 0 2\n",
      " 0 3 3 2 1 1 1 3 2 3 0 1 2 2 3 2 0 3 2 2 1 3 3 3 0 0 3 2 1 2 2 0 0 3 0 3 3\n",
      " 3 3 3 2 2 1 3 0 0 0 0 1 1 3 2]\n",
      "Location of centroids: \n",
      "[[ 2.05509413  1.55336203]\n",
      " [ 9.14794457 -2.61667701]\n",
      " [-1.48385442  7.97740229]\n",
      " [-0.55060131  3.49957061]]\n"
     ]
    }
   ],
   "source": [
    "predicted = model.labels_\n",
    "centroids = model.cluster_centers_\n",
    "\n",
    "print (\"Predicted clusters to points: \", predicted)\n",
    "print (\"Location of centroids: \")\n",
    "print (centroids)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.360700</td>\n",
       "      <td>0.748029</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-3.278940</td>\n",
       "      <td>9.899953</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.588943</td>\n",
       "      <td>4.001485</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.973739</td>\n",
       "      <td>6.944545</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.431693</td>\n",
       "      <td>-0.201737</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          x         y  predicted\n",
       "0  1.360700  0.748029          0\n",
       "1 -3.278940  9.899953          2\n",
       "2  0.588943  4.001485          3\n",
       "3 -0.973739  6.944545          2\n",
       "4  2.431693 -0.201737          0"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['predicted'] = predicted\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1bf439b0>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 458,
       "width": 622
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "\n",
    "df.plot(x=\"x\", y=\"y\", kind=\"scatter\", c=df['predicted'], cmap='Spectral', figsize=(10,8));\n",
    "plt.scatter(centroids[:,:1], centroids[:,1:], marker='o', s=150, alpha=.7);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6069968845106598"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "score = silhouette_score(df, predicted, metric='euclidean')\n",
    "score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2.05509413],\n",
       "       [ 9.14794457],\n",
       "       [-1.48385442],\n",
       "       [-0.55060131]])"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "centroids[:,:1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.55336203],\n",
       "       [-2.61667701],\n",
       "       [ 7.97740229],\n",
       "       [ 3.49957061]])"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "centroids[:,1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2.05509413,  1.55336203],\n",
       "       [ 9.14794457, -2.61667701],\n",
       "       [-1.48385442,  7.97740229],\n",
       "       [-0.55060131,  3.49957061]])"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "centroids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.41702883, -0.75482941, -1.15864824, -0.53452248,  1.96116135,\n",
       "        -0.78262379, -0.61237244],\n",
       "       [-1.35534369,  0.21566555, -0.41380294,  0.42761799, -0.68640647,\n",
       "         0.89442719, -0.61237244],\n",
       "       [-0.41702883,  0.21566555,  1.07588766, -0.05345225, -0.68640647,\n",
       "        -0.78262379,  1.83711731],\n",
       "       [ 0.52128604,  0.21566555,  0.33104236,  0.90868822, -0.68640647,\n",
       "         1.22983739, -0.61237244],\n",
       "       [ 0.52128604, -0.75482941,  1.07588766, -0.05345225, -0.68640647,\n",
       "        -0.78262379,  1.83711731],\n",
       "       [-1.35534369, -1.72532437,  0.33104236, -0.05345225,  1.07863874,\n",
       "        -0.1118034 , -0.61237244],\n",
       "       [-0.41702883,  0.21566555, -0.41380294,  1.87082869, -0.68640647,\n",
       "         1.90065778, -0.61237244],\n",
       "       [ 1.4596009 ,  2.15665546,  1.07588766, -1.97773319, -0.68640647,\n",
       "        -0.78262379, -0.61237244],\n",
       "       [ 1.4596009 ,  0.21566555, -1.90349354, -0.53452248,  1.07863874,\n",
       "        -0.78262379,  0.        ],\n",
       "       [-0.41702883, -0.75482941, -1.15864824, -0.53452248,  1.96116135,\n",
       "        -0.78262379, -0.61237244],\n",
       "       [-1.35534369,  0.21566555, -0.41380294,  0.42761799, -0.68640647,\n",
       "         0.89442719, -0.61237244],\n",
       "       [-0.41702883,  0.21566555,  1.07588766, -0.05345225, -0.68640647,\n",
       "        -0.78262379,  1.83711731],\n",
       "       [ 0.52128604,  0.21566555,  0.33104236,  0.90868822, -0.68640647,\n",
       "         1.22983739, -0.61237244],\n",
       "       [ 0.52128604, -0.75482941,  1.07588766, -0.05345225, -0.68640647,\n",
       "        -0.78262379,  1.83711731],\n",
       "       [-1.35534369, -1.72532437,  0.33104236, -0.05345225,  1.07863874,\n",
       "        -0.1118034 , -0.61237244],\n",
       "       [-0.41702883,  0.21566555, -0.41380294,  1.87082869, -0.68640647,\n",
       "         1.90065778, -0.61237244],\n",
       "       [ 1.4596009 ,  2.15665546,  1.07588766, -1.97773319, -0.68640647,\n",
       "        -0.78262379, -0.61237244],\n",
       "       [ 1.4596009 ,  0.21566555, -1.90349354, -0.53452248,  1.07863874,\n",
       "        -0.78262379,  0.        ],\n",
       "       [-0.41702883, -0.75482941, -1.15864824, -0.53452248,  1.96116135,\n",
       "        -0.78262379, -0.61237244],\n",
       "       [-1.35534369,  0.21566555, -0.41380294,  0.42761799, -0.68640647,\n",
       "         0.89442719, -0.61237244],\n",
       "       [-0.41702883,  0.21566555,  1.07588766, -0.05345225, -0.68640647,\n",
       "        -0.78262379,  1.83711731],\n",
       "       [ 0.52128604,  0.21566555,  0.33104236,  0.90868822, -0.68640647,\n",
       "         1.22983739, -0.61237244],\n",
       "       [ 0.52128604, -0.75482941,  1.07588766, -0.05345225, -0.68640647,\n",
       "        -0.78262379,  1.83711731],\n",
       "       [-1.35534369, -1.72532437,  0.33104236, -0.05345225,  1.07863874,\n",
       "        -0.1118034 , -0.61237244],\n",
       "       [-0.41702883,  0.21566555, -0.41380294,  1.87082869, -0.68640647,\n",
       "         1.90065778, -0.61237244],\n",
       "       [ 1.4596009 ,  2.15665546,  1.07588766, -1.97773319, -0.68640647,\n",
       "        -0.78262379, -0.61237244],\n",
       "       [ 1.4596009 ,  0.21566555, -1.90349354, -0.53452248,  1.07863874,\n",
       "        -0.78262379,  0.        ],\n",
       "       [-0.41702883, -0.75482941, -1.15864824, -0.53452248,  1.96116135,\n",
       "        -0.78262379, -0.61237244],\n",
       "       [-1.35534369,  0.21566555, -0.41380294,  0.42761799, -0.68640647,\n",
       "         0.89442719, -0.61237244],\n",
       "       [-0.41702883,  0.21566555,  1.07588766, -0.05345225, -0.68640647,\n",
       "        -0.78262379,  1.83711731],\n",
       "       [ 0.52128604,  0.21566555,  0.33104236,  0.90868822, -0.68640647,\n",
       "         1.22983739, -0.61237244],\n",
       "       [ 0.52128604, -0.75482941,  1.07588766, -0.05345225, -0.68640647,\n",
       "        -0.78262379,  1.83711731],\n",
       "       [-1.35534369, -1.72532437,  0.33104236, -0.05345225,  1.07863874,\n",
       "        -0.1118034 , -0.61237244],\n",
       "       [-0.41702883,  0.21566555, -0.41380294,  1.87082869, -0.68640647,\n",
       "         1.90065778, -0.61237244],\n",
       "       [ 1.4596009 ,  2.15665546,  1.07588766, -1.97773319, -0.68640647,\n",
       "        -0.78262379, -0.61237244],\n",
       "       [ 1.4596009 ,  0.21566555, -1.90349354, -0.53452248,  1.07863874,\n",
       "        -0.78262379,  0.        ],\n",
       "       [-0.41702883, -0.75482941, -1.15864824, -0.53452248,  1.96116135,\n",
       "        -0.78262379, -0.61237244],\n",
       "       [-1.35534369,  0.21566555, -0.41380294,  0.42761799, -0.68640647,\n",
       "         0.89442719, -0.61237244],\n",
       "       [-0.41702883,  0.21566555,  1.07588766, -0.05345225, -0.68640647,\n",
       "        -0.78262379,  1.83711731],\n",
       "       [ 0.52128604,  0.21566555,  0.33104236,  0.90868822, -0.68640647,\n",
       "         1.22983739, -0.61237244],\n",
       "       [ 0.52128604, -0.75482941,  1.07588766, -0.05345225, -0.68640647,\n",
       "        -0.78262379,  1.83711731],\n",
       "       [-1.35534369, -1.72532437,  0.33104236, -0.05345225,  1.07863874,\n",
       "        -0.1118034 , -0.61237244],\n",
       "       [-0.41702883,  0.21566555, -0.41380294,  1.87082869, -0.68640647,\n",
       "         1.90065778, -0.61237244],\n",
       "       [ 1.4596009 ,  2.15665546,  1.07588766, -1.97773319, -0.68640647,\n",
       "        -0.78262379, -0.61237244],\n",
       "       [ 1.4596009 ,  0.21566555, -1.90349354, -0.53452248,  1.07863874,\n",
       "        -0.78262379,  0.        ]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "X = df.drop(df[['color','shape']], axis=1)\n",
    "\n",
    "ss = StandardScaler()\n",
    "ss.fit_transform(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.cluster import KMeans, k_means\n",
    "from sklearn.metrics import silhouette_score\n",
    "data = 'Desktop/shapes.xlsx'\n",
    "df = pd.read_excel(data)\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "df['color_'] = df['color']\n",
    "df = pd.get_dummies(data=df, columns=['color_'])\n",
    "\n",
    "X = df.drop(df[['shape', 'color']], axis=1)\n",
    "\n",
    "ss = StandardScaler()\n",
    "ss.fit_transform(X)\n",
    "#K is the (initial) number of points you are looking for\n",
    "\n",
    "model = KMeans(n_clusters=3, random_state=0) # use KMeans++ method for generally best results\n",
    "model.fit(X)\n",
    "\n",
    "df['predicted'] = model.labels_\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>shape</th>\n",
       "      <th>width</th>\n",
       "      <th>length</th>\n",
       "      <th>diameter</th>\n",
       "      <th>angles</th>\n",
       "      <th>sharp angles</th>\n",
       "      <th>obtus angles</th>\n",
       "      <th>rightangle</th>\n",
       "      <th>color__blue</th>\n",
       "      <th>color__green</th>\n",
       "      <th>color__orange</th>\n",
       "      <th>color__red</th>\n",
       "      <th>color__yellow</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>green</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>green</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>green</td>\n",
       "      <td>square</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>green</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>green</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>green</td>\n",
       "      <td>diamond</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>green</td>\n",
       "      <td>octagon</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>green</td>\n",
       "      <td>circle</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>green</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>red</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>red</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>red</td>\n",
       "      <td>square</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>red</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>red</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>red</td>\n",
       "      <td>diamond</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>red</td>\n",
       "      <td>octagon</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>red</td>\n",
       "      <td>circle</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>red</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>yellow</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>yellow</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>yellow</td>\n",
       "      <td>square</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>yellow</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>yellow</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>yellow</td>\n",
       "      <td>diamond</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>yellow</td>\n",
       "      <td>octagon</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>yellow</td>\n",
       "      <td>circle</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>yellow</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>blue</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>blue</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>blue</td>\n",
       "      <td>square</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>blue</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>blue</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>blue</td>\n",
       "      <td>diamond</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>blue</td>\n",
       "      <td>octagon</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>blue</td>\n",
       "      <td>circle</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>blue</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>orange</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>orange</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>orange</td>\n",
       "      <td>square</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>orange</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>orange</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>orange</td>\n",
       "      <td>diamond</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>orange</td>\n",
       "      <td>octagon</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>orange</td>\n",
       "      <td>circle</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>orange</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     color          shape  width  length  diameter  angles  sharp angles  \\\n",
       "0    green       triangle      6       5         5       3             3   \n",
       "1    green       pentagon      5       6         6       5             0   \n",
       "2    green         square      6       6         8       4             0   \n",
       "3    green        hexagon      7       6         7       6             0   \n",
       "4    green      rectangle      7       5         8       4             0   \n",
       "5    green        diamond      5       4         7       4             2   \n",
       "6    green        octagon      6       6         6       8             0   \n",
       "7    green         circle      8       8         8       0             0   \n",
       "8    green  trirightangle      8       6         4       3             2   \n",
       "9      red       triangle      6       5         5       3             3   \n",
       "10     red       pentagon      5       6         6       5             0   \n",
       "11     red         square      6       6         8       4             0   \n",
       "12     red        hexagon      7       6         7       6             0   \n",
       "13     red      rectangle      7       5         8       4             0   \n",
       "14     red        diamond      5       4         7       4             2   \n",
       "15     red        octagon      6       6         6       8             0   \n",
       "16     red         circle      8       8         8       0             0   \n",
       "17     red  trirightangle      8       6         4       3             2   \n",
       "18  yellow       triangle      6       5         5       3             3   \n",
       "19  yellow       pentagon      5       6         6       5             0   \n",
       "20  yellow         square      6       6         8       4             0   \n",
       "21  yellow        hexagon      7       6         7       6             0   \n",
       "22  yellow      rectangle      7       5         8       4             0   \n",
       "23  yellow        diamond      5       4         7       4             2   \n",
       "24  yellow        octagon      6       6         6       8             0   \n",
       "25  yellow         circle      8       8         8       0             0   \n",
       "26  yellow  trirightangle      8       6         4       3             2   \n",
       "27    blue       triangle      6       5         5       3             3   \n",
       "28    blue       pentagon      5       6         6       5             0   \n",
       "29    blue         square      6       6         8       4             0   \n",
       "30    blue        hexagon      7       6         7       6             0   \n",
       "31    blue      rectangle      7       5         8       4             0   \n",
       "32    blue        diamond      5       4         7       4             2   \n",
       "33    blue        octagon      6       6         6       8             0   \n",
       "34    blue         circle      8       8         8       0             0   \n",
       "35    blue  trirightangle      8       6         4       3             2   \n",
       "36  orange       triangle      6       5         5       3             3   \n",
       "37  orange       pentagon      5       6         6       5             0   \n",
       "38  orange         square      6       6         8       4             0   \n",
       "39  orange        hexagon      7       6         7       6             0   \n",
       "40  orange      rectangle      7       5         8       4             0   \n",
       "41  orange        diamond      5       4         7       4             2   \n",
       "42  orange        octagon      6       6         6       8             0   \n",
       "43  orange         circle      8       8         8       0             0   \n",
       "44  orange  trirightangle      8       6         4       3             2   \n",
       "\n",
       "    obtus angles  rightangle  color__blue  color__green  color__orange  \\\n",
       "0              0           0            0             1              0   \n",
       "1              5           0            0             1              0   \n",
       "2              0           4            0             1              0   \n",
       "3              6           0            0             1              0   \n",
       "4              0           4            0             1              0   \n",
       "5              2           0            0             1              0   \n",
       "6              8           0            0             1              0   \n",
       "7              0           0            0             1              0   \n",
       "8              0           1            0             1              0   \n",
       "9              0           0            0             0              0   \n",
       "10             5           0            0             0              0   \n",
       "11             0           4            0             0              0   \n",
       "12             6           0            0             0              0   \n",
       "13             0           4            0             0              0   \n",
       "14             2           0            0             0              0   \n",
       "15             8           0            0             0              0   \n",
       "16             0           0            0             0              0   \n",
       "17             0           1            0             0              0   \n",
       "18             0           0            0             0              0   \n",
       "19             5           0            0             0              0   \n",
       "20             0           4            0             0              0   \n",
       "21             6           0            0             0              0   \n",
       "22             0           4            0             0              0   \n",
       "23             2           0            0             0              0   \n",
       "24             8           0            0             0              0   \n",
       "25             0           0            0             0              0   \n",
       "26             0           1            0             0              0   \n",
       "27             0           0            1             0              0   \n",
       "28             5           0            1             0              0   \n",
       "29             0           4            1             0              0   \n",
       "30             6           0            1             0              0   \n",
       "31             0           4            1             0              0   \n",
       "32             2           0            1             0              0   \n",
       "33             8           0            1             0              0   \n",
       "34             0           0            1             0              0   \n",
       "35             0           1            1             0              0   \n",
       "36             0           0            0             0              1   \n",
       "37             5           0            0             0              1   \n",
       "38             0           4            0             0              1   \n",
       "39             6           0            0             0              1   \n",
       "40             0           4            0             0              1   \n",
       "41             2           0            0             0              1   \n",
       "42             8           0            0             0              1   \n",
       "43             0           0            0             0              1   \n",
       "44             0           1            0             0              1   \n",
       "\n",
       "    color__red  color__yellow  predicted  \n",
       "0            0              0          0  \n",
       "1            0              0          1  \n",
       "2            0              0          2  \n",
       "3            0              0          1  \n",
       "4            0              0          2  \n",
       "5            0              0          0  \n",
       "6            0              0          1  \n",
       "7            0              0          0  \n",
       "8            0              0          0  \n",
       "9            1              0          0  \n",
       "10           1              0          1  \n",
       "11           1              0          2  \n",
       "12           1              0          1  \n",
       "13           1              0          2  \n",
       "14           1              0          0  \n",
       "15           1              0          1  \n",
       "16           1              0          0  \n",
       "17           1              0          0  \n",
       "18           0              1          0  \n",
       "19           0              1          1  \n",
       "20           0              1          2  \n",
       "21           0              1          1  \n",
       "22           0              1          2  \n",
       "23           0              1          0  \n",
       "24           0              1          1  \n",
       "25           0              1          0  \n",
       "26           0              1          0  \n",
       "27           0              0          0  \n",
       "28           0              0          1  \n",
       "29           0              0          2  \n",
       "30           0              0          1  \n",
       "31           0              0          2  \n",
       "32           0              0          0  \n",
       "33           0              0          1  \n",
       "34           0              0          0  \n",
       "35           0              0          0  \n",
       "36           0              0          0  \n",
       "37           0              0          1  \n",
       "38           0              0          2  \n",
       "39           0              0          1  \n",
       "40           0              0          2  \n",
       "41           0              0          0  \n",
       "42           0              0          1  \n",
       "43           0              0          0  \n",
       "44           0              0          0  "
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>shape</th>\n",
       "      <th>width</th>\n",
       "      <th>length</th>\n",
       "      <th>diameter</th>\n",
       "      <th>angles</th>\n",
       "      <th>sharp angles</th>\n",
       "      <th>obtus angles</th>\n",
       "      <th>rightangle</th>\n",
       "      <th>colorcode</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>green</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>green</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>green</td>\n",
       "      <td>square</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>green</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>green</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>green</td>\n",
       "      <td>diamond</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>green</td>\n",
       "      <td>octagon</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>green</td>\n",
       "      <td>circle</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>green</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>red</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>red</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>red</td>\n",
       "      <td>square</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>red</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>red</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>red</td>\n",
       "      <td>diamond</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>red</td>\n",
       "      <td>octagon</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>red</td>\n",
       "      <td>circle</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>red</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>yellow</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>yellow</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>yellow</td>\n",
       "      <td>square</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>yellow</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>yellow</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>yellow</td>\n",
       "      <td>diamond</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>yellow</td>\n",
       "      <td>octagon</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>yellow</td>\n",
       "      <td>circle</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>yellow</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>blue</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>blue</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>blue</td>\n",
       "      <td>square</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>blue</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>blue</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>blue</td>\n",
       "      <td>diamond</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>blue</td>\n",
       "      <td>octagon</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>blue</td>\n",
       "      <td>circle</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>blue</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>orange</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>orange</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>orange</td>\n",
       "      <td>square</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>orange</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>orange</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>orange</td>\n",
       "      <td>diamond</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>orange</td>\n",
       "      <td>octagon</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>orange</td>\n",
       "      <td>circle</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>orange</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     color          shape  width  length  diameter  angles  sharp angles  \\\n",
       "0    green       triangle      6       5         5       3             3   \n",
       "1    green       pentagon      5       6         6       5             0   \n",
       "2    green         square      6       6         8       4             0   \n",
       "3    green        hexagon      7       6         7       6             0   \n",
       "4    green      rectangle      7       5         8       4             0   \n",
       "5    green        diamond      5       4         7       4             2   \n",
       "6    green        octagon      6       6         6       8             0   \n",
       "7    green         circle      8       8         8       0             0   \n",
       "8    green  trirightangle      8       6         4       3             2   \n",
       "9      red       triangle      6       5         5       3             3   \n",
       "10     red       pentagon      5       6         6       5             0   \n",
       "11     red         square      6       6         8       4             0   \n",
       "12     red        hexagon      7       6         7       6             0   \n",
       "13     red      rectangle      7       5         8       4             0   \n",
       "14     red        diamond      5       4         7       4             2   \n",
       "15     red        octagon      6       6         6       8             0   \n",
       "16     red         circle      8       8         8       0             0   \n",
       "17     red  trirightangle      8       6         4       3             2   \n",
       "18  yellow       triangle      6       5         5       3             3   \n",
       "19  yellow       pentagon      5       6         6       5             0   \n",
       "20  yellow         square      6       6         8       4             0   \n",
       "21  yellow        hexagon      7       6         7       6             0   \n",
       "22  yellow      rectangle      7       5         8       4             0   \n",
       "23  yellow        diamond      5       4         7       4             2   \n",
       "24  yellow        octagon      6       6         6       8             0   \n",
       "25  yellow         circle      8       8         8       0             0   \n",
       "26  yellow  trirightangle      8       6         4       3             2   \n",
       "27    blue       triangle      6       5         5       3             3   \n",
       "28    blue       pentagon      5       6         6       5             0   \n",
       "29    blue         square      6       6         8       4             0   \n",
       "30    blue        hexagon      7       6         7       6             0   \n",
       "31    blue      rectangle      7       5         8       4             0   \n",
       "32    blue        diamond      5       4         7       4             2   \n",
       "33    blue        octagon      6       6         6       8             0   \n",
       "34    blue         circle      8       8         8       0             0   \n",
       "35    blue  trirightangle      8       6         4       3             2   \n",
       "36  orange       triangle      6       5         5       3             3   \n",
       "37  orange       pentagon      5       6         6       5             0   \n",
       "38  orange         square      6       6         8       4             0   \n",
       "39  orange        hexagon      7       6         7       6             0   \n",
       "40  orange      rectangle      7       5         8       4             0   \n",
       "41  orange        diamond      5       4         7       4             2   \n",
       "42  orange        octagon      6       6         6       8             0   \n",
       "43  orange         circle      8       8         8       0             0   \n",
       "44  orange  trirightangle      8       6         4       3             2   \n",
       "\n",
       "    obtus angles  rightangle  colorcode  predicted  \n",
       "0              0           0          1          0  \n",
       "1              5           0          1          1  \n",
       "2              0           4          1          2  \n",
       "3              6           0          1          1  \n",
       "4              0           4          1          2  \n",
       "5              2           0          1          0  \n",
       "6              8           0          1          1  \n",
       "7              0           0          1          0  \n",
       "8              0           1          1          0  \n",
       "9              0           0          2          0  \n",
       "10             5           0          2          1  \n",
       "11             0           4          2          2  \n",
       "12             6           0          2          1  \n",
       "13             0           4          2          2  \n",
       "14             2           0          2          0  \n",
       "15             8           0          2          1  \n",
       "16             0           0          2          0  \n",
       "17             0           1          2          0  \n",
       "18             0           0          3          0  \n",
       "19             5           0          3          1  \n",
       "20             0           4          3          2  \n",
       "21             6           0          3          1  \n",
       "22             0           4          3          2  \n",
       "23             2           0          3          0  \n",
       "24             8           0          3          1  \n",
       "25             0           0          3          0  \n",
       "26             0           1          3          0  \n",
       "27             0           0          4          0  \n",
       "28             5           0          4          1  \n",
       "29             0           4          4          2  \n",
       "30             6           0          4          1  \n",
       "31             0           4          4          2  \n",
       "32             2           0          4          0  \n",
       "33             8           0          4          1  \n",
       "34             0           0          4          0  \n",
       "35             0           1          4          0  \n",
       "36             0           0          5          0  \n",
       "37             5           0          5          1  \n",
       "38             0           4          5          2  \n",
       "39             6           0          5          1  \n",
       "40             0           4          5          2  \n",
       "41             2           0          5          0  \n",
       "42             8           0          5          1  \n",
       "43             0           0          5          0  \n",
       "44             0           1          5          0  "
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>shape</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>blue</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>blue</td>\n",
       "      <td>diamond</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>blue</td>\n",
       "      <td>circle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>blue</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>green</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>green</td>\n",
       "      <td>diamond</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>green</td>\n",
       "      <td>circle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>green</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>orange</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>orange</td>\n",
       "      <td>diamond</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>orange</td>\n",
       "      <td>circle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>orange</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>red</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>red</td>\n",
       "      <td>diamond</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>red</td>\n",
       "      <td>circle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>red</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>yellow</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>yellow</td>\n",
       "      <td>diamond</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>yellow</td>\n",
       "      <td>circle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>yellow</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>blue</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>blue</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>blue</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>green</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>green</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>green</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>orange</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>orange</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>orange</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>red</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>red</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>red</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>yellow</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>yellow</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>yellow</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>blue</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>blue</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>green</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>green</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>orange</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>orange</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>red</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>red</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>yellow</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>yellow</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     color          shape  predicted\n",
       "27    blue       triangle          0\n",
       "32    blue        diamond          0\n",
       "34    blue         circle          0\n",
       "35    blue  trirightangle          0\n",
       "0    green       triangle          0\n",
       "5    green        diamond          0\n",
       "7    green         circle          0\n",
       "8    green  trirightangle          0\n",
       "36  orange       triangle          0\n",
       "41  orange        diamond          0\n",
       "43  orange         circle          0\n",
       "44  orange  trirightangle          0\n",
       "9      red       triangle          0\n",
       "14     red        diamond          0\n",
       "16     red         circle          0\n",
       "17     red  trirightangle          0\n",
       "18  yellow       triangle          0\n",
       "23  yellow        diamond          0\n",
       "25  yellow         circle          0\n",
       "26  yellow  trirightangle          0\n",
       "28    blue       pentagon          1\n",
       "30    blue        hexagon          1\n",
       "33    blue        octagon          1\n",
       "1    green       pentagon          1\n",
       "3    green        hexagon          1\n",
       "6    green        octagon          1\n",
       "37  orange       pentagon          1\n",
       "39  orange        hexagon          1\n",
       "42  orange        octagon          1\n",
       "10     red       pentagon          1\n",
       "12     red        hexagon          1\n",
       "15     red        octagon          1\n",
       "19  yellow       pentagon          1\n",
       "21  yellow        hexagon          1\n",
       "24  yellow        octagon          1\n",
       "29    blue         square          2\n",
       "31    blue      rectangle          2\n",
       "2    green         square          2\n",
       "4    green      rectangle          2\n",
       "38  orange         square          2\n",
       "40  orange      rectangle          2\n",
       "11     red         square          2\n",
       "13     red      rectangle          2\n",
       "20  yellow         square          2\n",
       "22  yellow      rectangle          2"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['color', 'shape', 'predicted']].sort_values(by=['predicted', 'color'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>shape</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>blue</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>blue</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>blue</td>\n",
       "      <td>octagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>green</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>green</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>green</td>\n",
       "      <td>octagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>orange</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>orange</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>orange</td>\n",
       "      <td>octagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>red</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>red</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>red</td>\n",
       "      <td>octagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>yellow</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>yellow</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>yellow</td>\n",
       "      <td>octagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>blue</td>\n",
       "      <td>triangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>blue</td>\n",
       "      <td>diamond</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>blue</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>green</td>\n",
       "      <td>triangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>green</td>\n",
       "      <td>diamond</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>green</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>orange</td>\n",
       "      <td>triangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>orange</td>\n",
       "      <td>diamond</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>orange</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>red</td>\n",
       "      <td>triangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>red</td>\n",
       "      <td>diamond</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>red</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>yellow</td>\n",
       "      <td>triangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>yellow</td>\n",
       "      <td>diamond</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>yellow</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>blue</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>blue</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>green</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>green</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>orange</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>orange</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>red</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>red</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>yellow</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>yellow</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>blue</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>green</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>orange</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>red</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>yellow</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     color          shape  predicted\n",
       "28    blue       pentagon          0\n",
       "30    blue        hexagon          0\n",
       "33    blue        octagon          0\n",
       "1    green       pentagon          0\n",
       "3    green        hexagon          0\n",
       "6    green        octagon          0\n",
       "37  orange       pentagon          0\n",
       "39  orange        hexagon          0\n",
       "42  orange        octagon          0\n",
       "10     red       pentagon          0\n",
       "12     red        hexagon          0\n",
       "15     red        octagon          0\n",
       "19  yellow       pentagon          0\n",
       "21  yellow        hexagon          0\n",
       "24  yellow        octagon          0\n",
       "27    blue       triangle          1\n",
       "32    blue        diamond          1\n",
       "35    blue  trirightangle          1\n",
       "0    green       triangle          1\n",
       "5    green        diamond          1\n",
       "8    green  trirightangle          1\n",
       "36  orange       triangle          1\n",
       "41  orange        diamond          1\n",
       "44  orange  trirightangle          1\n",
       "9      red       triangle          1\n",
       "14     red        diamond          1\n",
       "17     red  trirightangle          1\n",
       "18  yellow       triangle          1\n",
       "23  yellow        diamond          1\n",
       "26  yellow  trirightangle          1\n",
       "29    blue         square          2\n",
       "31    blue      rectangle          2\n",
       "2    green         square          2\n",
       "4    green      rectangle          2\n",
       "38  orange         square          2\n",
       "40  orange      rectangle          2\n",
       "11     red         square          2\n",
       "13     red      rectangle          2\n",
       "20  yellow         square          2\n",
       "22  yellow      rectangle          2\n",
       "34    blue         circle          3\n",
       "7    green         circle          3\n",
       "43  orange         circle          3\n",
       "16     red         circle          3\n",
       "25  yellow         circle          3"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = KMeans(n_clusters=4, random_state=0) # use KMeans++ method for generally best results\n",
    "model.fit(X)\n",
    "\n",
    "df['predicted'] = model.labels_\n",
    "\n",
    "df[['color', 'shape', 'predicted']].sort_values(by=['predicted', 'color'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>shape</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>blue</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>green</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>orange</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>red</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>yellow</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>blue</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>green</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>orange</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>red</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>yellow</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>blue</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>green</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>orange</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>red</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>yellow</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>blue</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>green</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>orange</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>red</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>yellow</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>blue</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>green</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>orange</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>red</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>yellow</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>blue</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>green</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>orange</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>red</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>yellow</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>blue</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>green</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>orange</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>red</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>yellow</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>blue</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>green</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>orange</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>red</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>yellow</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>blue</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>green</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>orange</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>red</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>yellow</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     color          shape  predicted\n",
       "27    blue       triangle          0\n",
       "0    green       triangle          0\n",
       "36  orange       triangle          0\n",
       "9      red       triangle          0\n",
       "18  yellow       triangle          0\n",
       "35    blue  trirightangle          0\n",
       "8    green  trirightangle          0\n",
       "44  orange  trirightangle          0\n",
       "17     red  trirightangle          0\n",
       "26  yellow  trirightangle          0\n",
       "30    blue        hexagon          1\n",
       "3    green        hexagon          1\n",
       "39  orange        hexagon          1\n",
       "12     red        hexagon          1\n",
       "21  yellow        hexagon          1\n",
       "33    blue        octagon          1\n",
       "6    green        octagon          1\n",
       "42  orange        octagon          1\n",
       "15     red        octagon          1\n",
       "24  yellow        octagon          1\n",
       "28    blue       pentagon          1\n",
       "1    green       pentagon          1\n",
       "37  orange       pentagon          1\n",
       "10     red       pentagon          1\n",
       "19  yellow       pentagon          1\n",
       "31    blue      rectangle          2\n",
       "4    green      rectangle          2\n",
       "40  orange      rectangle          2\n",
       "13     red      rectangle          2\n",
       "22  yellow      rectangle          2\n",
       "29    blue         square          2\n",
       "2    green         square          2\n",
       "38  orange         square          2\n",
       "11     red         square          2\n",
       "20  yellow         square          2\n",
       "32    blue        diamond          3\n",
       "5    green        diamond          3\n",
       "41  orange        diamond          3\n",
       "14     red        diamond          3\n",
       "23  yellow        diamond          3\n",
       "34    blue         circle          4\n",
       "7    green         circle          4\n",
       "43  orange         circle          4\n",
       "16     red         circle          4\n",
       "25  yellow         circle          4"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = KMeans(n_clusters=5, random_state=0) # use KMeans++ method for generally best results\n",
    "model.fit(X)\n",
    "\n",
    "df['predicted'] = model.labels_\n",
    "\n",
    "df[['color', 'shape', 'predicted']].sort_values(by=['predicted','shape' , 'color'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>shape</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>blue</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>green</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>orange</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>red</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>yellow</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>blue</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>green</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>orange</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>red</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>yellow</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>blue</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>green</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>orange</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>red</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>yellow</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>blue</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>green</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>orange</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>red</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>yellow</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>blue</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>green</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>orange</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>red</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>yellow</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>blue</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>green</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>orange</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>red</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>yellow</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>blue</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>green</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>orange</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>red</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>yellow</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>blue</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>green</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>orange</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>red</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>yellow</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>blue</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>green</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>orange</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>red</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>yellow</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     color          shape  predicted\n",
       "27    blue       triangle          0\n",
       "0    green       triangle          0\n",
       "36  orange       triangle          0\n",
       "9      red       triangle          0\n",
       "18  yellow       triangle          0\n",
       "35    blue  trirightangle          0\n",
       "8    green  trirightangle          0\n",
       "44  orange  trirightangle          0\n",
       "17     red  trirightangle          0\n",
       "26  yellow  trirightangle          0\n",
       "30    blue        hexagon          1\n",
       "3    green        hexagon          1\n",
       "39  orange        hexagon          1\n",
       "12     red        hexagon          1\n",
       "21  yellow        hexagon          1\n",
       "28    blue       pentagon          1\n",
       "1    green       pentagon          1\n",
       "37  orange       pentagon          1\n",
       "10     red       pentagon          1\n",
       "19  yellow       pentagon          1\n",
       "31    blue      rectangle          2\n",
       "4    green      rectangle          2\n",
       "40  orange      rectangle          2\n",
       "13     red      rectangle          2\n",
       "22  yellow      rectangle          2\n",
       "29    blue         square          2\n",
       "2    green         square          2\n",
       "38  orange         square          2\n",
       "11     red         square          2\n",
       "20  yellow         square          2\n",
       "32    blue        diamond          3\n",
       "5    green        diamond          3\n",
       "41  orange        diamond          3\n",
       "14     red        diamond          3\n",
       "23  yellow        diamond          3\n",
       "34    blue         circle          4\n",
       "7    green         circle          4\n",
       "43  orange         circle          4\n",
       "16     red         circle          4\n",
       "25  yellow         circle          4\n",
       "33    blue        octagon          5\n",
       "6    green        octagon          5\n",
       "42  orange        octagon          5\n",
       "15     red        octagon          5\n",
       "24  yellow        octagon          5"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = KMeans(n_clusters=6, random_state=0) # use KMeans++ method for generally best results\n",
    "model.fit(X)\n",
    "\n",
    "df['predicted'] = model.labels_\n",
    "\n",
    "df[['color', 'shape', 'predicted']].sort_values(by=['predicted','shape' , 'color'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>shape</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>blue</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>green</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>orange</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>red</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>yellow</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>blue</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>green</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>orange</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>red</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>yellow</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>blue</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>green</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>orange</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>red</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>yellow</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>blue</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>green</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>orange</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>red</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>yellow</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>blue</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>green</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>orange</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>red</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>yellow</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>blue</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>green</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>orange</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>red</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>yellow</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>blue</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>green</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>orange</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>red</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>yellow</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>blue</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>green</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>orange</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>red</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>yellow</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>blue</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>green</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>orange</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>red</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>yellow</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     color          shape  predicted\n",
       "35    blue  trirightangle          0\n",
       "8    green  trirightangle          0\n",
       "44  orange  trirightangle          0\n",
       "17     red  trirightangle          0\n",
       "26  yellow  trirightangle          0\n",
       "30    blue        hexagon          1\n",
       "3    green        hexagon          1\n",
       "39  orange        hexagon          1\n",
       "12     red        hexagon          1\n",
       "21  yellow        hexagon          1\n",
       "28    blue       pentagon          1\n",
       "1    green       pentagon          1\n",
       "37  orange       pentagon          1\n",
       "10     red       pentagon          1\n",
       "19  yellow       pentagon          1\n",
       "31    blue      rectangle          2\n",
       "4    green      rectangle          2\n",
       "40  orange      rectangle          2\n",
       "13     red      rectangle          2\n",
       "22  yellow      rectangle          2\n",
       "29    blue         square          2\n",
       "2    green         square          2\n",
       "38  orange         square          2\n",
       "11     red         square          2\n",
       "20  yellow         square          2\n",
       "32    blue        diamond          3\n",
       "5    green        diamond          3\n",
       "41  orange        diamond          3\n",
       "14     red        diamond          3\n",
       "23  yellow        diamond          3\n",
       "34    blue         circle          4\n",
       "7    green         circle          4\n",
       "43  orange         circle          4\n",
       "16     red         circle          4\n",
       "25  yellow         circle          4\n",
       "33    blue        octagon          5\n",
       "6    green        octagon          5\n",
       "42  orange        octagon          5\n",
       "15     red        octagon          5\n",
       "24  yellow        octagon          5\n",
       "27    blue       triangle          6\n",
       "0    green       triangle          6\n",
       "36  orange       triangle          6\n",
       "9      red       triangle          6\n",
       "18  yellow       triangle          6"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = KMeans(n_clusters=7, random_state=0) \n",
    "model.fit(X)\n",
    "\n",
    "df['predicted'] = model.labels_\n",
    "\n",
    "df[['color', 'shape', 'predicted']].sort_values(by=['predicted','shape' , 'color'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>shape</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>blue</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>green</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>orange</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>red</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>yellow</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>blue</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>green</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>orange</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>red</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>yellow</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>blue</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>green</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>orange</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>red</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>yellow</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>blue</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>green</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>orange</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>red</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>yellow</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>blue</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>green</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>orange</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>red</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>yellow</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>blue</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>green</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>orange</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>red</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>yellow</td>\n",
       "      <td>diamond</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>blue</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>green</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>orange</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>red</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>yellow</td>\n",
       "      <td>circle</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>blue</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>green</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>orange</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>red</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>yellow</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>blue</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>green</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>orange</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>red</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>yellow</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     color          shape  predicted\n",
       "35    blue  trirightangle          0\n",
       "8    green  trirightangle          0\n",
       "44  orange  trirightangle          0\n",
       "17     red  trirightangle          0\n",
       "26  yellow  trirightangle          0\n",
       "30    blue        hexagon          1\n",
       "3    green        hexagon          1\n",
       "39  orange        hexagon          1\n",
       "12     red        hexagon          1\n",
       "21  yellow        hexagon          1\n",
       "28    blue       pentagon          1\n",
       "1    green       pentagon          1\n",
       "37  orange       pentagon          1\n",
       "10     red       pentagon          1\n",
       "19  yellow       pentagon          1\n",
       "31    blue      rectangle          2\n",
       "4    green      rectangle          2\n",
       "40  orange      rectangle          2\n",
       "13     red      rectangle          2\n",
       "22  yellow      rectangle          2\n",
       "29    blue         square          2\n",
       "2    green         square          2\n",
       "38  orange         square          2\n",
       "11     red         square          2\n",
       "20  yellow         square          2\n",
       "32    blue        diamond          3\n",
       "5    green        diamond          3\n",
       "41  orange        diamond          3\n",
       "14     red        diamond          3\n",
       "23  yellow        diamond          3\n",
       "34    blue         circle          4\n",
       "7    green         circle          4\n",
       "43  orange         circle          4\n",
       "16     red         circle          4\n",
       "25  yellow         circle          4\n",
       "33    blue        octagon          5\n",
       "6    green        octagon          5\n",
       "42  orange        octagon          5\n",
       "15     red        octagon          5\n",
       "24  yellow        octagon          5\n",
       "27    blue       triangle          6\n",
       "0    green       triangle          6\n",
       "36  orange       triangle          6\n",
       "9      red       triangle          6\n",
       "18  yellow       triangle          6"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = KMeans(n_clusters=7, random_state=0) # use KMeans++ method for generally best results\n",
    "model.fit(X)\n",
    "\n",
    "df['predicted'] = model.labels_\n",
    "\n",
    "df[['color', 'shape', 'predicted']].sort_values(by=['predicted','shape' , 'color'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>shape</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>blue</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>green</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>orange</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>red</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>yellow</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>blue</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>green</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>orange</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>red</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>yellow</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>blue</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>green</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>orange</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>red</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>yellow</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>blue</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>green</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>orange</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>red</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>yellow</td>\n",
       "      <td>square</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>blue</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>green</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>orange</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>red</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>yellow</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>blue</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>green</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>orange</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>red</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>yellow</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>blue</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>green</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>orange</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>red</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>yellow</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>blue</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>green</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>orange</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>red</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>yellow</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>blue</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>green</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>orange</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>red</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>yellow</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     color          shape  predicted\n",
       "28    blue       pentagon          0\n",
       "1    green       pentagon          0\n",
       "37  orange       pentagon          0\n",
       "10     red       pentagon          0\n",
       "19  yellow       pentagon          0\n",
       "35    blue  trirightangle          1\n",
       "8    green  trirightangle          1\n",
       "44  orange  trirightangle          1\n",
       "17     red  trirightangle          1\n",
       "26  yellow  trirightangle          1\n",
       "31    blue      rectangle          2\n",
       "4    green      rectangle          2\n",
       "40  orange      rectangle          2\n",
       "13     red      rectangle          2\n",
       "22  yellow      rectangle          2\n",
       "29    blue         square          2\n",
       "2    green         square          2\n",
       "38  orange         square          2\n",
       "11     red         square          2\n",
       "20  yellow         square          2\n",
       "34    blue         circle          3\n",
       "7    green         circle          3\n",
       "43  orange         circle          3\n",
       "16     red         circle          3\n",
       "25  yellow         circle          3\n",
       "32    blue        diamond          4\n",
       "5    green        diamond          4\n",
       "41  orange        diamond          4\n",
       "14     red        diamond          4\n",
       "23  yellow        diamond          4\n",
       "33    blue        octagon          5\n",
       "6    green        octagon          5\n",
       "42  orange        octagon          5\n",
       "15     red        octagon          5\n",
       "24  yellow        octagon          5\n",
       "27    blue       triangle          6\n",
       "0    green       triangle          6\n",
       "36  orange       triangle          6\n",
       "9      red       triangle          6\n",
       "18  yellow       triangle          6\n",
       "30    blue        hexagon          7\n",
       "3    green        hexagon          7\n",
       "39  orange        hexagon          7\n",
       "12     red        hexagon          7\n",
       "21  yellow        hexagon          7"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = KMeans(n_clusters=8, random_state=0) # use KMeans++ method for generally best results\n",
    "model.fit(X)\n",
    "\n",
    "df['predicted'] = model.labels_\n",
    "\n",
    "df[['color', 'shape', 'predicted']].sort_values(by=['predicted','shape' , 'color'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>shape</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>blue</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>green</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>orange</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>red</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>yellow</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>blue</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>green</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>orange</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>red</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>yellow</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>blue</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>green</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>orange</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>red</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>yellow</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>blue</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>green</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>orange</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>red</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>yellow</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>blue</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>green</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>orange</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>red</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>yellow</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>blue</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>green</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>orange</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>red</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>yellow</td>\n",
       "      <td>octagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>blue</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>green</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>orange</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>red</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>yellow</td>\n",
       "      <td>triangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>blue</td>\n",
       "      <td>square</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>green</td>\n",
       "      <td>square</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>orange</td>\n",
       "      <td>square</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>red</td>\n",
       "      <td>square</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>yellow</td>\n",
       "      <td>square</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>blue</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>green</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>orange</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>red</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>yellow</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     color          shape  predicted\n",
       "35    blue  trirightangle          0\n",
       "8    green  trirightangle          0\n",
       "44  orange  trirightangle          0\n",
       "17     red  trirightangle          0\n",
       "26  yellow  trirightangle          0\n",
       "30    blue        hexagon          1\n",
       "3    green        hexagon          1\n",
       "39  orange        hexagon          1\n",
       "12     red        hexagon          1\n",
       "21  yellow        hexagon          1\n",
       "31    blue      rectangle          2\n",
       "4    green      rectangle          2\n",
       "40  orange      rectangle          2\n",
       "13     red      rectangle          2\n",
       "22  yellow      rectangle          2\n",
       "34    blue         circle          3\n",
       "7    green         circle          3\n",
       "43  orange         circle          3\n",
       "16     red         circle          3\n",
       "25  yellow         circle          3\n",
       "32    blue        diamond          4\n",
       "5    green        diamond          4\n",
       "41  orange        diamond          4\n",
       "14     red        diamond          4\n",
       "23  yellow        diamond          4\n",
       "33    blue        octagon          5\n",
       "6    green        octagon          5\n",
       "42  orange        octagon          5\n",
       "15     red        octagon          5\n",
       "24  yellow        octagon          5\n",
       "27    blue       triangle          6\n",
       "0    green       triangle          6\n",
       "36  orange       triangle          6\n",
       "9      red       triangle          6\n",
       "18  yellow       triangle          6\n",
       "29    blue         square          7\n",
       "2    green         square          7\n",
       "38  orange         square          7\n",
       "11     red         square          7\n",
       "20  yellow         square          7\n",
       "28    blue       pentagon          8\n",
       "1    green       pentagon          8\n",
       "37  orange       pentagon          8\n",
       "10     red       pentagon          8\n",
       "19  yellow       pentagon          8"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = KMeans(n_clusters=9, random_state=0) # use KMeans++ method for generally best results\n",
    "model.fit(X)\n",
    "\n",
    "df['predicted'] = model.labels_\n",
    "\n",
    "df[['color', 'shape', 'predicted']].sort_values(by=['predicted','shape' , 'color'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>shape</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>green</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>orange</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>red</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>yellow</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>blue</td>\n",
       "      <td>triangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>green</td>\n",
       "      <td>triangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>orange</td>\n",
       "      <td>triangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>red</td>\n",
       "      <td>triangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>yellow</td>\n",
       "      <td>triangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>blue</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>green</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>orange</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>red</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>yellow</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>blue</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>green</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>orange</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>red</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>yellow</td>\n",
       "      <td>circle</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>blue</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>green</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>orange</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>red</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>yellow</td>\n",
       "      <td>diamond</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>blue</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>green</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>orange</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>red</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>yellow</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>blue</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>green</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>orange</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>red</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>yellow</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>blue</td>\n",
       "      <td>octagon</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>green</td>\n",
       "      <td>octagon</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>orange</td>\n",
       "      <td>octagon</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>red</td>\n",
       "      <td>octagon</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>yellow</td>\n",
       "      <td>octagon</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>blue</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>blue</td>\n",
       "      <td>square</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>green</td>\n",
       "      <td>square</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>orange</td>\n",
       "      <td>square</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>red</td>\n",
       "      <td>square</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>yellow</td>\n",
       "      <td>square</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     color          shape  predicted\n",
       "3    green        hexagon          0\n",
       "39  orange        hexagon          0\n",
       "12     red        hexagon          0\n",
       "21  yellow        hexagon          0\n",
       "27    blue       triangle          1\n",
       "0    green       triangle          1\n",
       "36  orange       triangle          1\n",
       "9      red       triangle          1\n",
       "18  yellow       triangle          1\n",
       "31    blue      rectangle          2\n",
       "4    green      rectangle          2\n",
       "40  orange      rectangle          2\n",
       "13     red      rectangle          2\n",
       "22  yellow      rectangle          2\n",
       "34    blue         circle          3\n",
       "7    green         circle          3\n",
       "43  orange         circle          3\n",
       "16     red         circle          3\n",
       "25  yellow         circle          3\n",
       "32    blue        diamond          4\n",
       "5    green        diamond          4\n",
       "41  orange        diamond          4\n",
       "14     red        diamond          4\n",
       "23  yellow        diamond          4\n",
       "28    blue       pentagon          5\n",
       "1    green       pentagon          5\n",
       "37  orange       pentagon          5\n",
       "10     red       pentagon          5\n",
       "19  yellow       pentagon          5\n",
       "35    blue  trirightangle          6\n",
       "8    green  trirightangle          6\n",
       "44  orange  trirightangle          6\n",
       "17     red  trirightangle          6\n",
       "26  yellow  trirightangle          6\n",
       "33    blue        octagon          7\n",
       "6    green        octagon          7\n",
       "42  orange        octagon          7\n",
       "15     red        octagon          7\n",
       "24  yellow        octagon          7\n",
       "30    blue        hexagon          8\n",
       "29    blue         square          9\n",
       "2    green         square          9\n",
       "38  orange         square          9\n",
       "11     red         square          9\n",
       "20  yellow         square          9"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = KMeans(n_clusters=10, random_state=0) # use KMeans++ method for generally best results\n",
    "model.fit(X)\n",
    "\n",
    "df['predicted'] = model.labels_\n",
    "\n",
    "df[['color', 'shape', 'predicted']].sort_values(by=['predicted','shape' , 'color'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "picture = 'RedSquare.png'\n",
    "df['picture'] = picture"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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fevrrbfe0oMPPii73e6YBOqt8fg9evSQzeb835dd/TcKAE0RK2YAUIPw8HCX2y/+C2FFRUWVbfn5+fU+r6swUrkyZZXS0lKNHz9e48aN0+eff16rv9y66t+V06dPa8iQIbrnnnu0evXqWh3nxzUXj+2Pj4+vVx+VfjygoyYFBQWSpLZt27pdFW3fvn21/Sp98MEHuv766yVJOTk5+uMf/6hx48YpLi5OPXv21LRp07R3794aj9uQfevjgQce0FtvvSXDMGS32zV58mS9//77jXb8umjIf6MA0BQRzACgkV38zqpnn31W3333Xa1/uHqmyd1f/hvb888/73iWKzExUe+884527NihU6dOqaysTKZpyjTNKlMp6/uM2dSpU/XPf/5TkjR48GC9//77+te//qXCwkKVl5c7znXxdD1X56q85a6+6nKt63quH9fHxsZqxYoVWr9+vaZNm6aBAwcqODhYkrR79269+OKL6tmzp1544YVqx2rIvvX1wAMP6M0336wSzj744INGOz4A+CtuZQSARnbx7XXnz59XYmKiF7upv7feekvShVH/mZmZTlcoLh5mUR9nzpzR3/72N0kXQtmaNWuc3qLm6lwXX/fDhw/Xe3R/bVUO1Dh27JgqKipchrm8vDzHz2sa8y9JSUlJSkpKkiSdO3dO69ev1yeffKJ3331XJSUlevLJJ3XFFVfohhtuaNR962PKlCkyTVMPP/ywKioqlJaWJsMwdPvttzfK8QHAH7FiBgCNrF+/fo5g8cUXX1h67oauFFUqKCjQkSNHJEk333yzy9vGNm3a1KBz7dmzR6WlpZKkCRMmuHxuyNW5BgwY4Pi5FYMprrjiCkkXwvf27dtd1la+V01Srd75FRYWpmHDhunNN9/UvHnzHJ/Pnz/fo/vWxYMPPqjXX39dhmGooqJCd911lz788MNGPQcA+BOCGQA0sqioKMfwia1bt1oazkJDQyVJJSUlDTrOxbdjnj171mldTk6OFi9ebMm5Nm/erI0bNzrdPnToULVs2VLShbHulRMaPeXi1SdXrzooLS3V7NmzJV2Y0HjttdfW+zwXP0fn6X1r46GHHtJrr71WJZw1dgAEAH9BMAMAD0hPT3esXqWlpWnz5s0u6/fs2aOPPvqoweetHKGen5+v06dP1/s4MTExjmEjn376aY1/qS8sLNTEiRMbHAIvueQSxyrZBx98oHPnzlWrOXLkiNvpf5GRkfrFL34h6cKtjHfeeWeNx6rk6tUEtTFmzBjH+8neeecdLVmypMa6qVOnOsa1T548uco7xbZv3+72z8bSpUsdP688X0P3bUwPP/ywXnvtNUkXhmxMmjSpUf4sNxVdunSRYRgyDMPp6yAqJ1QahqH33nuvxpr33nvPUXP33XfXWJOdne2oqen9bN7oCYB1eMYMADzg2muv1bPPPqunn35ax48fV3Jysm6//XaNGTPG8Reu/Px8ffPNN/rss8+0bt063XHHHUpNTW3Qea+55hr99a9/ld1u1/3336/HHntMsbGxjpDYoUMHly9drmSz2ZSWlqY//vGPysvLU1JSkuM5JUnasGGDXnnlFR08eFDXXHONvv7663r3HB0drTFjxmjx4sXasWOHBg0apMcff1yXXnqpSkpK9NVXX+mPf/yjTpw4oeTk5Cq3Bf7YM888o3/84x9at26dMjIydNlll+mhhx5SUlKSWrZsqZMnT2r79u1avHixTp8+rW3bttW774CAAL333nsaNmyYysvLdcstt+j+++/XrbfeqqioKO3fv19vvvmm/vGPf0i6MN7++eefr3KM7du365577lHv3r01ZswY9e/fXx06dFBgYKDy8vK0bNkyx2pccHCwHnjggUbZt7E9/PDDMk1TP//5z1VRUaE777xThmFowoQJHjsnAPgaghkAeMivf/1rxcTEaOrUqTp79qzmzp2ruXPnOq1v1apVg885YcIEPf/889q1a5c++eQTffLJJ1W2r1q1yvFCa3d+85vfKDMzUxs2bND+/fv14IMPVtluGIaefvppde/evUHBTJLefPNN7dy5Uz/88IO++eYbpaWlVdkeFBSk119/XXl5eS6DWVBQkJYtW6bJkydr4cKFys7O1q9+9asaa2vzrJc711xzjRYvXqw77rhDp0+f1ltvveUYmnKxxMRELVmyxOkY/sqpnM5ERkbqvffeq3GQTEP2bUyPPPKITNPUo48+WiWc3XbbbR49LwD4CoIZAHjQAw88oFtvvVXvvPOOli9frp07d+rEiROy2WyKjo5Wjx49lJycrDFjxmjgwIENPl9YWJjWrl2rF154QV988YX279+vM2fO1GuMfUREhL766iu99tpr+vDDD/Wvf/1L5eXliouL0+DBg/Xggw/qpz/9qdPbpOqiffv2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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1c6fdb38>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 277,
       "width": 435
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#elbow method:\n",
    "inertias = []\n",
    "for n_clusters in range(1,20):\n",
    "    model = KMeans(n_clusters=n_clusters)\n",
    "    model.fit(X)\n",
    "    inertia = model.inertia_\n",
    "    inertias.append(inertia.mean())\n",
    "\n",
    "plt.plot(inertias)\n",
    "plt.ylabel(\"Inertia\")\n",
    "plt.xlabel(\"K\")\n",
    "plt.title(\"Inertia across K in .......\")\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unhashable type: 'slice'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-182-6cd0f56c2972>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mplot_columns\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mplot_columns\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"predicted\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'color'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'shape'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'predicted'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mby\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'predicted'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'shape'\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0;34m'color'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2137\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2138\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2139\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_column\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2141\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_getitem_column\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_getitem_column\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2144\u001b[0m         \u001b[0;31m# get column\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2145\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_unique\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2146\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_item_cache\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2148\u001b[0m         \u001b[0;31m# duplicate columns & possible reduce dimensionality\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.6/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m_get_item_cache\u001b[0;34m(self, item)\u001b[0m\n\u001b[1;32m   1838\u001b[0m         \u001b[0;34m\"\"\"Return the cached item, item represents a label indexer.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1839\u001b[0m         \u001b[0mcache\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_item_cache\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1840\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcache\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1841\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mres\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1842\u001b[0m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: unhashable type: 'slice'"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "from kmodes import kmodes\n",
    "\n",
    "\n",
    "km = kmodes.KModes(n_clusters=5, init='Huang', n_init=5, verbose=0)\n",
    "clusters = km.fit_predict(X)\n",
    "df['predicted'] = clusters\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.decomposition import PCA\n",
    "pca = PCA(2)\n",
    "\n",
    "# Turn the dummified df into two columns with PCA\n",
    "plot_columns = pca.fit_transform(X)#_dummy.ix[:,0:12])\n",
    "plot_columns = pd.DataFrame(plot_columns)\n",
    "\n",
    "\n",
    "# Plot based on the two dimensions, and shade by cluster label\n",
    "\n",
    "\n",
    "plt.scatter(x=plot_columns[:,1], y=plot_columns[:,0], c=df[\"predicted\"], s=30)\n",
    "plt.show()     \n",
    "df[['color', 'shape', 'predicted']].sort_values(by=['predicted','shape' , 'color'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Visually verifying cluster labels\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "df.plot(x=\"x\", y=\"y\", kind=\"scatter\", c=df['predicted'], cmap='Spectral', figsize=(10,8));\n",
    "plt.scatter(centroids[:,:1], centroids[:,1:], marker='o', s=150, alpha=.7);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[6, 5, 8, 4, 0, 0, 4, 0, 0, 0, 0, 0],\n",
       "       [8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
       "       [5, 6, 6, 8, 0, 8, 0, 0, 0, 0, 0, 0]])"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "km.cluster_centroids_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>color</th>\n",
       "      <th>shape</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>blue</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>green</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>orange</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>red</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>yellow</td>\n",
       "      <td>triangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>blue</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>green</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>orange</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>red</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>yellow</td>\n",
       "      <td>trirightangle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>blue</td>\n",
       "      <td>circle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>green</td>\n",
       "      <td>circle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>orange</td>\n",
       "      <td>circle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>red</td>\n",
       "      <td>circle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>yellow</td>\n",
       "      <td>circle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>blue</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>green</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>orange</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>red</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>yellow</td>\n",
       "      <td>hexagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>blue</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>green</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>orange</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>red</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>yellow</td>\n",
       "      <td>octagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>blue</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>green</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>orange</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>red</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>yellow</td>\n",
       "      <td>pentagon</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>blue</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>green</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>orange</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>red</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>yellow</td>\n",
       "      <td>rectangle</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>blue</td>\n",
       "      <td>square</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>green</td>\n",
       "      <td>square</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>orange</td>\n",
       "      <td>square</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>red</td>\n",
       "      <td>square</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>yellow</td>\n",
       "      <td>square</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>blue</td>\n",
       "      <td>diamond</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>green</td>\n",
       "      <td>diamond</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>orange</td>\n",
       "      <td>diamond</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>red</td>\n",
       "      <td>diamond</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>yellow</td>\n",
       "      <td>diamond</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     color          shape  predicted\n",
       "27    blue       triangle          0\n",
       "0    green       triangle          0\n",
       "36  orange       triangle          0\n",
       "9      red       triangle          0\n",
       "18  yellow       triangle          0\n",
       "35    blue  trirightangle          0\n",
       "8    green  trirightangle          0\n",
       "44  orange  trirightangle          0\n",
       "17     red  trirightangle          0\n",
       "26  yellow  trirightangle          0\n",
       "34    blue         circle          1\n",
       "7    green         circle          1\n",
       "43  orange         circle          1\n",
       "16     red         circle          1\n",
       "25  yellow         circle          1\n",
       "30    blue        hexagon          1\n",
       "3    green        hexagon          1\n",
       "39  orange        hexagon          1\n",
       "12     red        hexagon          1\n",
       "21  yellow        hexagon          1\n",
       "33    blue        octagon          1\n",
       "6    green        octagon          1\n",
       "42  orange        octagon          1\n",
       "15     red        octagon          1\n",
       "24  yellow        octagon          1\n",
       "28    blue       pentagon          1\n",
       "1    green       pentagon          1\n",
       "37  orange       pentagon          1\n",
       "10     red       pentagon          1\n",
       "19  yellow       pentagon          1\n",
       "31    blue      rectangle          1\n",
       "4    green      rectangle          1\n",
       "40  orange      rectangle          1\n",
       "13     red      rectangle          1\n",
       "22  yellow      rectangle          1\n",
       "29    blue         square          1\n",
       "2    green         square          1\n",
       "38  orange         square          1\n",
       "11     red         square          1\n",
       "20  yellow         square          1\n",
       "32    blue        diamond          2\n",
       "5    green        diamond          2\n",
       "41  orange        diamond          2\n",
       "14     red        diamond          2\n",
       "23  yellow        diamond          2"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['color', 'shape', 'predicted']].sort_values(by=['predicted','shape' , 'color'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  },
  "toc": {
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "165px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
